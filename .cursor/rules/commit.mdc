---
alwaysApply: false
description: Validate, then commit and push with minimal prompts
---

### Preconditions
- JDK 21 and Maven installed
- Git remotes configured and authenticated (e.g., `origin`)

### Steps

1. Build and test the project
   - Runs the standard build and tests rule
   ```bash
   @run-build.mdc
   ```

2. Remove unused imports (auto‑fix)
   - Uses a built-in OpenRewrite recipe; no external artifacts
   ```bash
   mvn -B org.openrewrite.maven:rewrite-maven-plugin:5.41.0:run \
     -Drewrite.activeRecipes=org.openrewrite.java.RemoveUnusedImports
   ```

3. Scan for vulnerable libraries (no NVD key required)
   - Uses Sonatype OSS Index audit; fails on vulnerabilities
   ```bash
   mvn -B org.sonatype.ossindex.maven:ossindex-maven-plugin:3.3.0:audit -Dossindex.fail=true
   ```

4. SAST and code style (security + UnnecessaryImport/FQN)
   - Runs PMD security rules and selected code-style checks; fails on violations; report at `target/pmd.xml`
   ```bash
   mvn -B org.apache.maven.plugins:maven-pmd-plugin:3.25.0:check \
     -Dpmd.rulesets=category/java/security.xml,category/java/codestyle.xml/UnnecessaryImport,category/java/codestyle.xml/UnnecessaryFullyQualifiedName
   ```

5. Bug finding (SpotBugs) for NPEs and common bugs
   - Low threshold, max effort; fails on detected issues; report at `target/spotbugsXml.xml`
   ```bash
   mvn -B com.github.spotbugs:spotbugs-maven-plugin:4.8.3.0:spotbugs \
     -Dspotbugs.threshold=Low \
     -Dspotbugs.effort=Max \
     -DfailOnError=true
   ```

6. Code coverage (informational)
   - If a JaCoCo report exists, print its location; otherwise continue
   ```bash
   if [ -f target/site/jacoco/index.html ]; then \
     echo "JaCoCo coverage report: target/site/jacoco/index.html"; \
   else \
     echo "No JaCoCo report found (plugin not configured)"; \
   fi
   ```

7. Generalized optimization suggestions and endpoint coverage
   - Optimization suggestions (lightweight, generalized heuristics):
   ```bash
   CHANGED=$(git diff --name-only | grep '^src/main/java/.*\.java$' || true)
   if [ -z "$CHANGED" ]; then CHANGED=$(git ls-files src/main/java | grep '\.java$'); fi
   mkdir -p target
   S=target/optimization-suggestions.txt
   : > "$S"
   echo "== Potential nested loops (consider preindexing/maps) ==" | tee -a "$S"
   awk '/for \(/ {c[FILENAME]++} END{for(f in c) if(c[f]>1) print f" : "c[f]" loops"}' $CHANGED 2>/dev/null | tee -a "$S"
   echo "\n== List scans / contains (consider Set/Map) ==" | tee -a "$S"
   grep -nE '\.contains\(|\.stream\(\)\.filter\(' $CHANGED 2>/dev/null | head -n 200 | tee -a "$S"
   echo "\n== Allocations in loops (look for 'new' near loops) ==" | tee -a "$S"
   grep -nE 'for \(|while \(' -n $CHANGED 2>/dev/null | cut -d: -f1 | sort -u | xargs -I{} sh -c 'grep -n "new \|Optional.of\|Collectors\.toList" {} | head -n 5' 2>/dev/null | tee -a "$S"
   echo "\n== Parallel usage (verify it helps; otherwise remove) ==" | tee -a "$S"
   grep -nE '\.parallelStream\(|\.parallel\(\)' $CHANGED 2>/dev/null | tee -a "$S"
   echo "\n== Blocking calls on request path (move off-thread/cached) ==" | tee -a "$S"
   grep -nE 'Thread\.sleep\(|\.join\(|Files\.|FileInputStream|HttpURLConnection|RestTemplate\.' $CHANGED 2>/dev/null | tee -a "$S"
   echo "\n== Synchronization (check contention) ==" | tee -a "$S"
   grep -nE 'synchronized\s*\(|synchronized\s+[^\(]' $CHANGED 2>/dev/null | tee -a "$S"
   echo "\nSuggestions written to $S" | tee -a "$S"
   ```
   - Endpoint coverage check (edit CLASS/METHOD as needed):
   ```bash
   mvn -B org.jacoco:jacoco-maven-plugin:prepare-agent verify org.jacoco:jacoco-maven-plugin:report
   echo "JaCoCo report: target/site/jacoco/index.html"
   # Optional: set CLASS=org/openapitools/api/YourController METHOD=yourMethod and inspect jacoco.xml
   ```
   - If branch misses are found in the report, add tests for alternate paths (e.g., not-found, config flags)

8. Commit and push
   - Prompt: "Provide the commit message (plain text only). Reply with the message only."
   - Then run:
   ```bash   git add -A
   git commit -m "<commit message>"
   git push
   ```

### Notes
- All steps above are non‑interactive except for the final commit message prompt
- OWASP and SpotBugs steps intentionally fail the flow on serious findings so issues are addressed before pushing



