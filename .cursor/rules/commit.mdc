---
alwaysApply: false
description: Validate, then commit and push with minimal prompts
---

### Preconditions
- JDK 21 and Maven installed
- Git remotes configured and authenticated (e.g., `origin`)

### Steps

1. Build and test the project
   - Runs the standard build and tests rule
   ```bash
   @run-build.mdc
   ```

2. Remove unused imports (auto‑fix)
   - Uses a built-in OpenRewrite recipe; no external artifacts
   ```bash
   mvn -B org.openrewrite.maven:rewrite-maven-plugin:5.41.0:run \
     -Drewrite.activeRecipes=org.openrewrite.java.RemoveUnusedImports
   ```

3. Scan for vulnerable libraries (no NVD key required)
   - Uses Sonatype OSS Index audit; fails on vulnerabilities
   ```bash
   mvn -B org.sonatype.ossindex.maven:ossindex-maven-plugin:3.3.0:audit -Dossindex.fail=true
   ```

4. SAST and code style (security + UnnecessaryImport/FQN)
   - Runs PMD security rules and selected code-style checks; fails on violations; report at `target/pmd.xml`
   ```bash
   mvn -B org.apache.maven.plugins:maven-pmd-plugin:3.25.0:check \
     -Dpmd.rulesets=category/java/security.xml,category/java/codestyle.xml/UnnecessaryImport,category/java/codestyle.xml/UnnecessaryFullyQualifiedName
   ```

5. Bug finding (SpotBugs) for NPEs and common bugs
   - Low threshold, max effort; fails on detected issues; report at `target/spotbugsXml.xml`
   ```bash
   mvn -B com.github.spotbugs:spotbugs-maven-plugin:4.8.3.0:spotbugs \
     -Dspotbugs.threshold=Low \
     -Dspotbugs.effort=Max \
     -DfailOnError=true
   ```

6. Code coverage (informational)
   - If a JaCoCo report exists, print its location; otherwise continue
   ```bash
   if [ -f target/site/jacoco/index.html ]; then \
     echo "JaCoCo coverage report: target/site/jacoco/index.html"; \
   else \
     echo "No JaCoCo report found (plugin not configured)"; \
   fi
   ```

7. Optimization and test gap suggestions (actionable, per-change)
   - Optimization suggestions (automated):
   ```bash
   # Run PMD with performance, best-practices, and error-prone rules
   mvn -B org.apache.maven.plugins:maven-pmd-plugin:3.25.0:pmd \
     -Dpmd.rulesets=category/java/performance.xml,category/java/bestpractices.xml,category/java/errorprone.xml
   # Summarize suggestions (file:line – rule – message)
   xmllint --xpath \
     'string-join(//pmd:file/pmd:violation/concat(../../@name, ":", @beginline, " – ", @rule, " – ", normalize-space(text()), "\n"), "")' \
     target/pmd.xml 2>/dev/null | head -n 50 | tee target/optimization-suggestions.txt || \
     echo "No PMD suggestions (or xmllint unavailable). See target/pmd.xml"
   ```
   - Missed tests / edge cases (automated, coverage-based):
   ```bash
   # Generate JaCoCo report (does not fail build)
   mvn -B org.jacoco:jacoco-maven-plugin:prepare-agent verify org.jacoco:jacoco-maven-plugin:report
   # List classes under 80% line coverage
   if [ -f target/site/jacoco/jacoco.xml ]; then \
     awk -F '"' '
       /<package name=/{pkg=$2}
       /<class name=/{cls=$2}
       /<counter type=\"LINE\"/{
         for(i=1;i<=NF;i++){if($i=="missed"){miss=$(i+2)}; if($i=="covered"){cov=$(i+2)}}
         total=miss+cov; if(total>0){pct=int((cov*100)/total); if(pct<80){print pkg"/"cls" "pct"%"}}
       }' target/site/jacoco/jacoco.xml | sort -k2,2n | tee target/test-gaps.txt; \
   else \
     echo "No jacoco.xml found. Configure JaCoCo to enable test gap detection."; \
   fi
   ```

8. Commit and push
   - Prompt: "Provide the commit message (plain text only). Reply with the message only."
   - Then run:
   ```bash   git add -A
   git commit -m "<commit message>"
   git push
   ```

### Notes
- All steps above are non‑interactive except for the final commit message prompt
- OWASP and SpotBugs steps intentionally fail the flow on serious findings so issues are addressed before pushing



