---
alwaysApply: false
description: Validate, then commit and push with minimal prompts
---

### Preconditions
- JDK 21 and Maven installed
- Git remotes configured and authenticated (e.g., `origin`)

### Steps

1. Build and test the project
   - Runs the standard build and tests rule
   ```bash
   @run-build.mdc
   ```

2. Remove unused imports (auto‑fix)
   - Uses a built-in OpenRewrite recipe; no external artifacts
   ```bash
   mvn -B org.openrewrite.maven:rewrite-maven-plugin:5.41.0:run \
     -Drewrite.activeRecipes=org.openrewrite.java.RemoveUnusedImports
   ```

3. Scan for vulnerable libraries (no NVD key required)
   - Uses Sonatype OSS Index audit; fails on vulnerabilities
   ```bash
   mvn -B org.sonatype.ossindex.maven:ossindex-maven-plugin:3.3.0:audit -Dossindex.fail=true
   ```

4. SAST and code style (security + UnnecessaryImport/FQN)
   - Runs PMD security rules and selected code-style checks; fails on violations; report at `target/pmd.xml`
   ```bash
   mvn -B org.apache.maven.plugins:maven-pmd-plugin:3.25.0:check \
     -Dpmd.rulesets=category/java/security.xml,category/java/codestyle.xml/UnnecessaryImport,category/java/codestyle.xml/UnnecessaryFullyQualifiedName
   ```

5. Bug finding (SpotBugs) for NPEs and common bugs
   - Low threshold, max effort; fails on detected issues; report at `target/spotbugsXml.xml`
   ```bash
   mvn -B com.github.spotbugs:spotbugs-maven-plugin:4.8.3.0:spotbugs \
     -Dspotbugs.threshold=Low \
     -Dspotbugs.effort=Max \
     -DfailOnError=true
   ```

6. Code coverage (informational)
   - If a JaCoCo report exists, print its location; otherwise continue
   ```bash
   if [ -f target/site/jacoco/index.html ]; then \
     echo "JaCoCo coverage report: target/site/jacoco/index.html"; \
   else \
     echo "No JaCoCo report found (plugin not configured)"; \
   fi
   ```

7. Optimization suggestions and endpoint coverage (focused)
   - Optimization suggestions (apply when relevant):
     - For ID-based retrieval, use `Map<Long, T>` over list scans
     - Seed data once and reuse; avoid per-request rebuilds
     - Prefer single-threaded streams; avoid parallel unless CPU-bound with measured gains
     - Expose immutable/unmodifiable collections for shared read-only data
   - Endpoint coverage check (edit CLASS/METHOD as needed):
   ```bash
   mvn -B org.jacoco:jacoco-maven-plugin:prepare-agent verify org.jacoco:jacoco-maven-plugin:report
   CLASS=org/openapitools/api/PetApiController
   METHOD=getPetById
   XML=target/site/jacoco/jacoco.xml
   echo "Coverage for $CLASS.$METHOD"
   echo -n "LINE missed/covered: "
   xmllint --xpath 'concat(//class[@name="'"$CLASS"'"]/method[@name="'"$METHOD"'"]/counter[@type="LINE"]/@missed,"/",//class[@name="'"$CLASS"'"]/method[@name="'"$METHOD"'"]/counter[@type="LINE"]/@covered)' "$XML" 2>/dev/null || echo "n/a"
   echo -n "BRANCH missed/covered: "
   xmllint --xpath 'concat(//class[@name="'"$CLASS"'"]/method[@name="'"$METHOD"'"]/counter[@type="BRANCH"]/@missed,"/",//class[@name="'"$CLASS"'"]/method[@name="'"$METHOD"'"]/counter[@type="BRANCH"]/@covered)' "$XML" 2>/dev/null || echo "n/a"
   echo "Full report: target/site/jacoco/index.html"
   ```
   - If branch misses are non-zero, add tests for alternate paths (e.g., not-found branch, config flag path)

8. Commit and push
   - Prompt: "Provide the commit message (plain text only). Reply with the message only."
   - Then run:
   ```bash   git add -A
   git commit -m "<commit message>"
   git push
   ```

### Notes
- All steps above are non‑interactive except for the final commit message prompt
- OWASP and SpotBugs steps intentionally fail the flow on serious findings so issues are addressed before pushing



